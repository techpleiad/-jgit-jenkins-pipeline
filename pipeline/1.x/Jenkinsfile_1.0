#!/usr/bin/env groovy


pipeline {
    agent any
    parameters {
        choice(name: 'choice', choices: ['Start-Release', 'End-Release', 'Update-Release', 'Update-Shared-Version'], description: 'Select Mode')
        booleanParam(name: 'debugmode', defaultValue: false, description: 'When debug mode is On, JGIT command will not be executed')
        choice(name: 'jdk_11', choices: "No\nYes", description: "Select yes for Open-JDK-11")
        text(name: 'GitRepos', defaultValue: "${JGIT_PIPELINE_DEFAULT_GIT_REPOS}", description: 'Enter the git repos, add a semicolon after each repo')
        text(name: 'EmailIds', defaultValue: "${JGIT_PIPELINE_DEFAULT_NOTIFICATION_EMAIL}", description: 'Enter the git repos, add a semicolon after each repo')
        string(name: 'source', defaultValue: 'dev', description: 'Source Branch of comparison')
        // defaultValue to be changed to dev in source and master in target. default value to be set to a company git repo in gitRepos ending by semicolon
        string(name: 'target', defaultValue: 'master', description: 'Target branch of comparison')
    }

    stages {
        stage('Operation') {
            steps {
                script {
                    def basePath = getBaseScriptsPath()
                    def baseScriptsPath = basePath + "/src/main/groovy/"
                    echo "Base script path ${baseScriptsPath}"

                    def inputSupport = load baseScriptsPath + "InputSupport.groovy"
                    def gitRepos = inputSupport.parseInputData(params.GitRepos)
                    def emails = inputSupport.parseInputData(params.EmailIds)
                    echo "Input git repositories ${gitRepos} and email id ${emails}"

                    echo "loading BuildVersion script files ${baseScriptsPath}BuildVersion.groovy"
                    def buildVersion = load baseScriptsPath + "BuildVersion.groovy"

                    echo "loading GitOperation script files ${baseScriptsPath}GitOperation.groovy"
                    def writeConfigFiles = load baseScriptsPath + "WriteConfigFiles.groovy"
                    def gitOperation = load baseScriptsPath + "GitOperation.groovy"
                    def startRelease = load baseScriptsPath + "startRelease.groovy"
                    def endRelease = load baseScriptsPath + "endRelease.groovy"
                    def updateRelease = load baseScriptsPath + "updateRelease.groovy"
                    if (params.jdk_11 == 'Yes') {
                        env.JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-amd64/"
                        sh "export JAVA_HOME=$env.JAVA_HOME"
                    }

                    if (params.choice == 'Start-Release') {
                        for (gitRepo in gitRepos) {
                            startRelease.startRelease(params.source, params.target, params.debugmode, gitOperation, buildVersion, gitRepo)
                        }
                    } else if (params.choice == 'End-Release') {

                        for (gitRepo in gitRepos) {
                            endRelease.endRelease(params.source, params.target, params.debugmode, gitOperation, buildVersion, gitRepo)
                        }
                    } else if (params.choice == "Update-Release") {
                        for (gitRepo in gitRepos) {
                            updateRelease.updateRelease(gitOperation, gitRepo, buildVersion)
                        }
                    } else if (params.choice == "Update-Shared-Version")
                        for (gitRepo in gitRepos) {
                            writeConfigFiles.updateSharedVersion(gitOperation, gitRepo, buildVersion, buildVersion, buildVersion)
                        }
                }

            } // step ends

        }  // stage ends
    }
}

/**
 * This method returns the basescript path based on where the pipeline code has been checked out
 * @return
 */
def getBaseScriptsPath() {

    sh "ls -l -R ${WORKSPACE}" // debug statement

    def directlyInWorkspace = fileExists "/${WORKSPACE}/src/main/groovy/InputSupport.groovy"

    def baseScriptPath;
    if (directlyInWorkspace) {
        baseScriptPath = "${WORKSPACE}"
    } else {

        def workSpaceInScriptDirectory = fileExists "/${WORKSPACE}@script/src/main/groovy/InputSupport.groovy"

        if (workSpaceInScriptDirectory) {
            baseScriptPath = "${WORKSPACE}@script"
            sh "ls -l -R ${baseScriptPath}" // debug statement
        } else {
            throw new Exception("Base script path not found")
        }
    }
    echo "Found base path of script at ${baseScriptPath}"
    return baseScriptPath
}


